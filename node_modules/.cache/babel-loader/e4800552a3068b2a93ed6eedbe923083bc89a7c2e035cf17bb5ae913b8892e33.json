{"ast":null,"code":"import _regeneratorRuntime from\"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _readOnlyError from\"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/node_modules/@babel/runtime/helpers/esm/readOnlyError.js\";import React,{useEffect,useState}from'react';/**\n * Don't touch these imports!\n */import{fetchAllCenturies,fetchAllClassifications,fetchQueryResults}from'../api';var Search=function Search(props){// Make sure to destructure setIsLoading and setSearchResults from the props\nvar setIsLoading=props.setIsLoading,setSearchResults=props.setSearchResults;/**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState\n   * for our controlled inputs:\n   */ /* centuryList, setCenturyList (default should be an empty array, [])*/var _useState=useState([]),_useState2=_slicedToArray(_useState,2),centuryList=_useState2[0],setCenturyList=_useState2[1];/* classificationList, setClassificationList (default should be an empty array, [])*/var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),classificationList=_useState4[0],setClassificationList=_useState4[1];/* queryString, setQueryString (default should be an empty string, '')*/var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),queryString=_useState6[0],setQueryString=_useState6[1];/* century, setCentury (default should be the string 'any')*/var _useState7=useState(\"any\"),_useState8=_slicedToArray(_useState7,2),century=_useState8[0],setCentury=_useState8[1];/* classification, setClassification (default should be the string 'any')*/var _useState9=useState(\"any\"),_useState10=_slicedToArray(_useState9,2),classification=_useState10[0],setClassification=_useState10[1];/**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   *\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   *\n   * Make sure to console.error on caught errors from the API methods.\n   */useEffect(function(){try{promise.all([fetchAllCenturies(),fetchAllClassifications()]).then(function(_ref){var _ref2=_slicedToArray(_ref,2),century=_ref2[0],classification=_ref2[1];setCenturyList(century);setClassificationList(classification);});}catch(error){console.error(error);throw error;}},[]);//HANDLERS\nvar handleQueryChange=function handleQueryChange(event){setQueryString(event.target.value);};var handleClassificationChange=function handleClassificationChange(event){setClassification(event.target.value);};var handleCenturyChange=function handleCenturyChange(event){setCentury(event.target.value);};//Map through centuryList AND create an option tag select list\nvar CenturyOptions=function CenturyOptions(){var listItem=centuryList.map(function(data){return/*#__PURE__*/React.createElement(\"option\",{value:data.name},data.name);});return listItem;};//Map through classificationList AND create an option tag select list\nvar ClassificationOptions=function ClassificationOptions(){var listItem=classificationList.map(function(data){return/*#__PURE__*/React.createElement(\"option\",{value:data.name},data.name);});return listItem;};/**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   *\n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   *\n   * then, in a try/catch/finally block:\n   **/return/*#__PURE__*/React.createElement(\"form\",{id:\"search\",onSubmit:/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(event){var queryResults;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// write code here\nevent.preventDefault();true,_readOnlyError(\"setIsLoading\");_context.prev=2;_context.next=5;return fetchQueryResults({century:century,classification:classification,queryString:queryString});case 5:queryResults=_context.sent;setSearchResults(queryResults);_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](2);console.error(\"Search Error:\".concat(_context.t0));//catch: error to console.error\ncase 12:_context.prev=12;setIsLoading(false);// finally: call setIsLoading, set it to false\nreturn _context.finish(12);case 15:case\"end\":return _context.stop();}}},_callee,null,[[2,9,12,15]]);}));return function(_x){return _ref3.apply(this,arguments);};}()},/*#__PURE__*/React.createElement(\"fieldset\",null,/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"keywords\"},\"Query\"),/*#__PURE__*/React.createElement(\"input\",{id:\"keywords\",type:\"text\",placeholder:\"enter keywords...\",value:queryString,onChange:handleQueryChange/* this should update the value of the query string */})),/*#__PURE__*/React.createElement(\"fieldset\",null,/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"select-classification\"},\"Classification\",\" \",/*#__PURE__*/React.createElement(\"span\",{className:\"classification-count\"},\"(\",classificationList===null||classificationList===void 0?void 0:classificationList.length,\")\")),/*#__PURE__*/React.createElement(\"select\",{name:\"classification\",id:\"select-classification\",value:classification/* this should be the classification */,onChange:handleClassificationChange/* this should update the value of the classification */},/*#__PURE__*/React.createElement(\"option\",{value:\"any\"},\"Any\"),/* map over the classificationList, return an <option /> */classificationList.map(function(classification,index){/*#__PURE__*/React.createElement(\"option\",{key:\"\".concat(index,\": \").concat(classification.name),value:classification.name},classification.name);}))),/*#__PURE__*/React.createElement(\"fieldset\",null,/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"select-century\"},\"Century\",/*#__PURE__*/React.createElement(\"span\",{className:\"century-count\"},\"(\",centuryList===null||centuryList===void 0?void 0:centuryList.length,\")\")),/*#__PURE__*/React.createElement(\"select\",{name:\"century\",id:\"select-century\",value:century/* this should be the century */,onChange:handleCenturyChange/* this should update the value of the century */},/*#__PURE__*/React.createElement(\"option\",{value:\"any\"},\"Any\"),/*#__PURE__*/React.createElement(CenturyOptions,null),\" \")),/*#__PURE__*/React.createElement(\"button\",null,\"SEARCH\"));};export default Search;","map":{"version":3,"names":["React","useEffect","useState","fetchAllCenturies","fetchAllClassifications","fetchQueryResults","Search","props","setIsLoading","setSearchResults","centuryList","setCenturyList","classificationList","setClassificationList","queryString","setQueryString","century","setCentury","classification","setClassification","promise","all","then","error","console","handleQueryChange","event","target","value","handleClassificationChange","handleCenturyChange","CenturyOptions","listItem","map","data","name","ClassificationOptions","preventDefault","queryResults","length","index"],"sources":["/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/components/Search.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = (props) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n  const { setIsLoading, setSearchResults } = props;\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState\n   * for our controlled inputs:\n   */\n  /* centuryList, setCenturyList (default should be an empty array, [])*/\n  const [centuryList, setCenturyList] = useState([]);\n  /* classificationList, setClassificationList (default should be an empty array, [])*/\n  const [classificationList, setClassificationList] = useState([]);\n  /* queryString, setQueryString (default should be an empty string, '')*/\n  const [queryString, setQueryString] = useState(\"\");\n  /* century, setCentury (default should be the string 'any')*/\n  const [century, setCentury] = useState(\"any\");\n  /* classification, setClassification (default should be the string 'any')*/\n  const [classification, setClassification] = useState(\"any\");\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   *\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   *\n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    try {\n      promise\n        .all([fetchAllCenturies(), fetchAllClassifications()])\n        .then(([century, classification]) => {\n          setCenturyList(century);\n          setClassificationList(classification);\n        });\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }, []);\n\n \n  //HANDLERS\n  const handleQueryChange = (event) => {\n    setQueryString(event.target.value);\n  };\n\n  const handleClassificationChange = (event) => {\n    setClassification(event.target.value);\n  };\n\n  const handleCenturyChange = (event) => {\n    setCentury(event.target.value);\n  };\n  //Map through centuryList AND create an option tag select list\n  const CenturyOptions = () => {\n    const listItem = centuryList.map((data) => {\n      return <option value={data.name}>{data.name}</option>;\n    });\n    return listItem;\n  };\n  //Map through classificationList AND create an option tag select list\n  const ClassificationOptions = () => {\n    const listItem = classificationList.map((data) => {\n      return <option value={data.name}>{data.name}</option>;\n    });\n    return listItem;\n  };\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   *\n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   *\n   * then, in a try/catch/finally block:\n   **/\n  return (\n    <form\n      id=\"search\"\n      onSubmit={ async (event) => {\n        // write code here\n        event.preventDefault();\n        setIsLoading = true;\n        try {\n          /*try to:\n           * - get the results from fetchQueryResults({ century, classification, queryString })\n           * - pass them to setSearchResults*/\n          //console.log(\"Hi I'm here!\");\n          const queryResults = await fetchQueryResults({\n            century,\n            classification,\n            queryString,\n          });\n          setSearchResults(queryResults);\n          \n        } catch (errorObject) {\n            console.error(`Search Error:${errorObject}`); //catch: error to console.error\n        } finally {\n          setIsLoading(false); // finally: call setIsLoading, set it to false\n        }\n      }}\n    >\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input\n        id=\"keywords\"\n        type=\"text\"\n        placeholder=\"enter keywords...\"\n        value={queryString}\n          onChange={\n            handleQueryChange /* this should update the value of the query string */\n          }\n        />\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-classification\">\n          Classification{\" \"}\n          <span className=\"classification-count\">\n            ({classificationList?.length})\n          </span>\n        </label>\n        <select\n          name=\"classification\"\n          id=\"select-classification\"\n          value={classification /* this should be the classification */}\n          onChange={\n            handleClassificationChange /* this should update the value of the classification */\n          }>\n        <option value=\"any\">Any</option>\n          {/* map over the classificationList, return an <option /> */\n            classificationList.map((classification, index) => {\n              <option key={`${ index }: ${classification.name}`}\n              value = {classification.name}>{classification.name}</option>\n            })\n            }\n        </select>\n\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-century\">\n          Century\n          <span className=\"century-count\">({centuryList?.length})</span>\n        </label>\n        <select\n          name=\"century\"\n          id=\"select-century\"\n          value={century /* this should be the century */}\n          onChange={\n            handleCenturyChange /* this should update the value of the century */\n          }\n        >\n          <option value=\"any\">Any</option>\n          <CenturyOptions />{\" \"}\n          {/*map over the centuryList, return an <option /> */}\n        </select>\n      </fieldset>\n      <button>SEARCH</button>\n    </form>\n  );\n}\n\nexport default Search;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}