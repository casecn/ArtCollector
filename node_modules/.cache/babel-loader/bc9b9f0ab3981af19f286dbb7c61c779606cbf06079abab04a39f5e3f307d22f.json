{"ast":null,"code":"import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\n//import { \n//Title,\n// Loading \n//} from './components';\n/*import {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';*/\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n  return \"Hi\";\n  // const [searchResults, setSearchResults] = useState({info: {}, records: []});\n  // const [featuredResult, setFeaturedResult] = useState(null);\n  // const [isLoading, setIsLoading ] = useState(false);\n\n  // return <div className=\"app\">\n  //     {/* <Title /> is static, doesn't need any props */}\n  //      <Title /> \n\n  //     {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n\n  //     {/* <Search /> */}\n\n  //     {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n\n  //     {/* <Preview /> */}\n\n  //     {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n\n  //     {/* <Feature /> */}\n\n  //     {/* <Loading /> is static, but should only render when isLoading is true */}\n\n  //     {/* <Loading />  */}\n\n  //     {/* use a ternary and render null if isLoading is false */}\n  //     isloading?<Loading />: null\n  //   </div>\n};\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactDOM","App"],"sources":["/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\n//import { \n  //Title,\n // Loading \n//} from './components';\n/*import {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';*/\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n  return \"Hi\"\n// const [searchResults, setSearchResults] = useState({info: {}, records: []});\n// const [featuredResult, setFeaturedResult] = useState(null);\n// const [isLoading, setIsLoading ] = useState(false);\n\n// return <div className=\"app\">\n//     {/* <Title /> is static, doesn't need any props */}\n//      <Title /> \n\n//     {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n\n//     {/* <Search /> */}\n\n//     {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n\n//     {/* <Preview /> */}\n\n//     {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    \n//     {/* <Feature /> */}\n\n//     {/* <Loading /> is static, but should only render when isLoading is true */}\n    \n//     {/* <Loading />  */}\n    \n//     {/* use a ternary and render null if isLoading is false */}\n//     isloading?<Loading />: null\n//   </div>\n}\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,WAAW;;AAEhC;AACA;AACE;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,GAAG,GAAG,MAAM;EAChB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAO,IAAI;EACb;EACA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;EACA;EACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AAHA,KAvCMA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}