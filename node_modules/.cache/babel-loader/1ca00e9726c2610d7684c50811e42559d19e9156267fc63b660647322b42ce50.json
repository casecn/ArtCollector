{"ast":null,"code":"/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=7b7ba71e-4682-484c-b276-af4ca1611ebe';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${BASE_URL}/object?${KEY}&${term}=${encodeURI(value.split('-').join('|'))}`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults(_ref) {\n  let {\n    century,\n    classification,\n    queryString\n  } = _ref;\n  const url = `${BASE_URL}/object?${KEY}&classification=${classification}&century=${century}&keyword=${queryString}`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n  const url = `${BASE_URL}/century?${KEY}&size=100&sort=temporalorder`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n    localStorage.setItem('centuries', JSON.stringify(records));\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n  const url = `${BASE_URL}/classification?${KEY}&size=100&sort=name`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n    localStorage.setItem('classifications', JSON.stringify(records));\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","map":{"version":3,"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","response","fetch","encodeURI","split","join","data","json","error","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications"],"sources":["/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/api/index.js"],"sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=7b7ba71e-4682-484c-b276-af4ca1611ebe';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,QAAQ,GAAG,mCAAmC;AAC3D,OAAO,MAAMC,GAAG,GAAG,6CAA6C;;AAEhE;AACA;AACA;AACA,OAAO,eAAeC,iCAAiC,CAACC,IAAI,EAAEC,KAAK,EAAE;EACnE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAGN,QAAU,WAAWC,GAAK,IAAIE,IAAM,IAAII,SAAS,CAACH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAG,EAAC,CAAC;IAClH,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;IAElC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA,OAAO,eAAeC,wBAAwB,CAACC,GAAG,EAAE;EAClD,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAACQ,GAAG,CAAC;IACjC,MAAMJ,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;IAElC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeG,iBAAiB,OAIpC;EAAA,IAJqC;IACtCC,OAAO;IACPC,cAAc;IACdC;EACF,CAAC;EACC,MAAMJ,GAAG,GAAI,GAAGd,QAAU,WAAWC,GAAK,mBAAmBgB,cAAgB,YAC3ED,OAAS,YAAYE,WAAa,EAAC;EAErC,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAACQ,GAAG,CAAC;IACjC,MAAMJ,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;IAElC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA,OAAO,eAAeO,iBAAiB,GAAG;EACxC,IAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,EAAE;IACrC,OAAOC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC;EACtD;EAEA,MAAMP,GAAG,GAAI,GAAGd,QAAU,YAAYC,GAAK,8BAA6B;EAExE,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACQ,GAAG,CAAC;IACjC,MAAMJ,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;IAClC,MAAMa,OAAO,GAAGd,IAAI,CAACc,OAAO;IAE5BJ,YAAY,CAACK,OAAO,CAAC,WAAW,EAAEH,IAAI,CAACI,SAAS,CAACF,OAAO,CAAC,CAAC;IAE1D,OAAOA,OAAO;EAChB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA,OAAO,eAAee,uBAAuB,GAAG;EAC9C,IAAIP,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,EAAE;IAC3C,OAAOC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC;EAC5D;EAEA,MAAMP,GAAG,GAAI,GAAGd,QAAU,mBAAmBC,GAAK,qBAAoB;EAEtE,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACQ,GAAG,CAAC;IACjC,MAAMJ,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;IAClC,MAAMa,OAAO,GAAGd,IAAI,CAACc,OAAO;IAE5BJ,YAAY,CAACK,OAAO,CAAC,iBAAiB,EAAEH,IAAI,CAACI,SAAS,CAACF,OAAO,CAAC,CAAC;IAEhE,OAAOA,OAAO;EAChB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}