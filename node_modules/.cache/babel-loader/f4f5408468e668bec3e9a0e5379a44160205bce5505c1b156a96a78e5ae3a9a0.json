{"ast":null,"code":"var _jsxFileName = \"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport { Title, Loading,\n//  Feature,\n//  Loading,\n//  Preview,\nSearch\n//  Title\n} from './components';\nconst App = () => {\n  _s();\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n  const [searchResults, setSearchResults] = useState({\n    info: {},\n    records: []\n  });\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // const loadComponent = () => {setIsLoading(!isLoading) } // THIS IS SAMPLE CODE\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(Search, {\n    setIsLoading: isLoading,\n    setSearchResults: setSearchResults,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Loading, {\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }));\n};\n_s(App, \"Yiw6vMzjlb+W9a0UP+SkRCrv468=\");\n_c = App;\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 3\n  }\n}), document.getElementById('app'));\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactDOM","Title","Loading","Search","App","searchResults","setSearchResults","info","records","featuredResult","setFeaturedResult","isLoading","setIsLoading","render","document","getElementById"],"sources":["/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport { \n  Title,\n  Loading, \n//  Feature,\n//  Loading,\n//  Preview,\n  Search,\n//  Title\n} from './components';\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\nconst [searchResults, setSearchResults] = useState({info: {}, records: []});\nconst [featuredResult, setFeaturedResult] = useState(null);\nconst [isLoading, setIsLoading ] = useState(false);\n\n// const loadComponent = () => {setIsLoading(!isLoading) } // THIS IS SAMPLE CODE\nreturn <div className=\"app\">\n    {/* <Title /> is static, doesn't need any props */}\n     <Title /> \n\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n\n    <Search setIsLoading={isLoading} setSearchResults={setSearchResults} />\n\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n\n    {/* <Preview /> */}\n\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    \n    {/* <Feature /> */}\n\n    {/* <Loading /> is static, but should only render when isLoading is true */}\n        \n    {/* use a ternary and render null if isLoading is false */}\n    \n    {/* <button onClick={()=>setIsLoading(!isLoading)}>Click Me</button> THIS IS SAMPLE CODE*/ }\n    {/* <button onClick={loadComponent}>Click Me</button> THIS IS SAMPLE CODE*/}\n    <Loading isLoading={isLoading} />{/* isloading?<Loading />: null */}\n  </div>\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app'),\n);\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,WAAW;;AAEhC;AACA,SACEC,KAAK,EACLC,OAAO;AACT;AACA;AACA;AACEC;AACF;AAAA,OACO,cAAc;AAErB,MAAMC,GAAG,GAAG,MAAM;EAAA;EAChB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC;IAACQ,IAAI,EAAE,CAAC,CAAC;IAAEC,OAAO,EAAE;EAAE,CAAC,CAAC;EAC3E,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAE,GAAGb,QAAQ,CAAC,KAAK,CAAC;;EAElD;EACA,oBAAO;IAAK,SAAS,EAAC,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAEtB,oBAAC,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,eAIV,oBAAC,MAAM;IAAC,YAAY,EAAEY,SAAU;IAAC,gBAAgB,EAAEL,gBAAiB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,eAgBvE,oBAAC,OAAO;IAAC,SAAS,EAAEK,SAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CAC7B;AACR,CAAC;AAAA,GAtCKP,GAAG;AAAA,KAAHA,GAAG;AAwCTJ,QAAQ,CAACa,MAAM,eACb,oBAAC,GAAG;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,EAAG,EACPC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC,CAC/B;AACD;AACA;AACA;AACA;AAHA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}