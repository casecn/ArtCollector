{"ast":null,"code":"import _regeneratorRuntime from\"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import React,{Fragment}from'react';// Don't touch this import\nimport{fetchQueryResultsFromTermAndValue}from'../api';/**\n * We need a new component called Searchable which:\n * \n * Has a template like this:\n * \n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n * \n * When someone clicks the anchor tag, you should:\n * \n * - preventDefault on the event\n * - call setIsLoading, set it to true\n * \n * Then start a try/catch/finally block:\n * \n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch: \n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */var Searchable=function Searchable(searchTerm,searchValue,setIsLoading,setSearchResults){return/*#__PURE__*/React.createElement(\"span\",{className:\"content\"},/*#__PURE__*/React.createElement(\"a\",{href:\"#\",onClick:/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(event){var result;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();setIsLoading(true);_context.prev=2;_context.next=5;return fetchQueryResultsFromTermAndValue(searchTerm,searchValue);case 5:result=_context.sent;setSearchResults(result);_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](2);console.log(_context.t0);case 12:_context.prev=12;setIsLoading(false);return _context.finish(12);case 15:case\"end\":return _context.stop();}}},_callee,null,[[2,9,12,15]]);}));return function(_x){return _ref.apply(this,arguments);};}()},searchValue));};/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n * \n * <main id=\"feature\"></main>\n * \n * And like this when one is:\n * \n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n * \n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n * technique, medium, dimensions, people, department, division, contact, creditline\n * \n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n * \n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n * \n * This component should be exported as default.\n */var Feature=function Feature(featuredResult){if(!featuredResult){return/*#__PURE__*/React.createElement(\"main\",{id:\"feature\"});}return/*#__PURE__*/React.createElement(\"main\",{id:\"feature\"},\"*   \",/*#__PURE__*/React.createElement(\"div\",{className:\"object-feature\"},\"*     \",/*#__PURE__*/React.createElement(\"header\",null,\"*       \",/*#__PURE__*/React.createElement(\"h3\",null,featuredResult.title),\"*       \",/*#__PURE__*/React.createElement(\"h4\",null,\"featuredResult.dated\"),\"*     \"),\"*     \",/*#__PURE__*/React.createElement(\"section\",{className:\"facts\"},\"*       \",/*#__PURE__*/React.createElement(\"span\",{className:\"title\"},\"FACT NAME\"),\"*       \",/*#__PURE__*/React.createElement(\"span\",{className:\"content\"},\"FACT VALUE\"),\"*       \",/*#__PURE__*/React.createElement(\"span\",{className:\"title\"},\"NEXT FACT NAME\"),\"*       \",/*#__PURE__*/React.createElement(\"span\",{className:\"content\"},\"NEXT FACT VALUE\"),\"*     \"),\"*     \",/*#__PURE__*/React.createElement(\"section\",{className:\"photos\"},\"*     \"),\"*   \"),\"* \");};export default Feature;","map":{"version":3,"names":["React","Fragment","fetchQueryResultsFromTermAndValue","Searchable","searchTerm","searchValue","setIsLoading","setSearchResults","event","preventDefault","result","console","log","Feature","featuredResult","title"],"sources":["/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/components/Feature.js"],"sourcesContent":["import React, { Fragment } from 'react';\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n\n/**\n * We need a new component called Searchable which:\n * \n * Has a template like this:\n * \n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n * \n * When someone clicks the anchor tag, you should:\n * \n * - preventDefault on the event\n * - call setIsLoading, set it to true\n * \n * Then start a try/catch/finally block:\n * \n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch: \n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\nconst Searchable = (searchTerm, searchValue, setIsLoading, setSearchResults,) => {\n  return(  <span className=\"content\">\n    <a href=\"#\" onClick={async (event) => {\n      event.preventDefault();\n      setIsLoading(true);\n      try {\n        const result = await fetchQueryResultsFromTermAndValue(searchTerm, searchValue);\n        setSearchResults(result);\n      }catch(error){\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    }}>{searchValue}\n    </a>\n  </span>\n  );\n};\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n * \n * <main id=\"feature\"></main>\n * \n * And like this when one is:\n * \n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n * \n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n * technique, medium, dimensions, people, department, division, contact, creditline\n * \n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n * \n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n * \n * This component should be exported as default.\n */\nconst Feature = (featuredResult) => {\nif (!featuredResult) {\n  return <main id=\"feature\"></main>;\n}\nreturn (\n  <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>{featuredResult.title}</h3>\n *       <h4>featuredResult.dated</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n {/* *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE /> */}\n *     </section>\n *   </div>\n * </main>\n)\n\n}\n\n\nexport default Feature;"],"mappings":"wVAAA,MAAOA,MAAK,EAAIC,QAAQ,KAAQ,OAAO,CAEvC;AACA,OAASC,iCAAiC,KAAQ,QAAQ,CAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,GAAMC,WAAU,CAAG,QAAbA,WAAU,CAAIC,UAAU,CAAEC,WAAW,CAAEC,YAAY,CAAEC,gBAAgB,CAAM,CAC/E,mBAAS,4BAAM,SAAS,CAAC,SAAS,eAChC,yBAAG,IAAI,CAAC,GAAG,CAAC,OAAO,4FAAE,iBAAOC,KAAK,+HAC/BA,KAAK,CAACC,cAAc,EAAE,CACtBH,YAAY,CAAC,IAAI,CAAC,CAAC,sCAEIJ,kCAAiC,CAACE,UAAU,CAAEC,WAAW,CAAC,QAAzEK,MAAM,eACZH,gBAAgB,CAACG,MAAM,CAAC,CAAC,+EAEzBC,OAAO,CAACC,GAAG,aAAO,CAAC,yBAEnBN,YAAY,CAAC,KAAK,CAAC,CAAC,qGAEvB,8DAAC,EAAED,WAAW,CACX,CACC,CAET,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,GAAMQ,QAAO,CAAG,QAAVA,QAAO,CAAIC,cAAc,CAAK,CACpC,GAAI,CAACA,cAAc,CAAE,CACnB,mBAAO,4BAAM,EAAE,CAAC,SAAS,EAAQ,CACnC,CACA,mBACE,4BAAM,EAAE,CAAC,SAAS,sBACf,2BAAK,SAAS,CAAC,gBAAgB,wBAC7B,0DACE,8BAAKA,cAAc,CAACC,KAAK,CAAM,yBAC/B,qDAA6B,UACtB,uBACT,+BAAS,SAAS,CAAC,OAAO,0BACxB,4BAAM,SAAS,CAAC,OAAO,cAAiB,yBACxC,4BAAM,SAAS,CAAC,SAAS,eAAkB,yBAC3C,4BAAM,SAAS,CAAC,OAAO,mBAAsB,yBAC7C,4BAAM,SAAS,CAAC,SAAS,oBAAuB,UACxC,uBACV,+BAAS,SAAS,CAAC,QAAQ,WAEjB,QACN,MACD,CAGV,CAAC,CAGD,cAAeF,QAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}