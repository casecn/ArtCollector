{"ast":null,"code":"import _slicedToArray from\"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import ReactDOM from'react-dom';// These imports won't work until you fix ./components/index.js\nimport{Title,Loading,//  Feature,\n//  Loading,\nPreview,Search//  Title\n}from'./components';var App=function App(){/**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */var _useState=useState({info:{},records:[]}),_useState2=_slicedToArray(_useState,2),searchResults=_useState2[0],setSearchResults=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),featuredResult=_useState4[0],setFeaturedResult=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isLoading=_useState6[0],setIsLoading=_useState6[1];// const loadComponent = () => {setIsLoading(!isLoading) } // THIS IS SAMPLE CODE\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"app\"},/*#__PURE__*/React.createElement(Title,null),/*#__PURE__*/React.createElement(Search,{setIsLoading:setIsLoading,setSearchResults:setSearchResults}),/*#__PURE__*/React.createElement(Preview,{searchResults:searchResults,setIsLoading:setIsLoading,setSearchResults:setSearchResults,setFeaturedResults:setFeaturedResult}),/*#__PURE__*/React.createElement(Loading,{isLoading:isLoading}),/*#__PURE__*/React.createElement(Loading,{isLoading:isLoading}));};ReactDOM.render(/*#__PURE__*/React.createElement(App,null),document.getElementById('app'));/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */","map":{"version":3,"names":["React","useState","ReactDOM","Title","Loading","Preview","Search","App","info","records","searchResults","setSearchResults","featuredResult","setFeaturedResult","isLoading","setIsLoading","render","document","getElementById"],"sources":["/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport { \n  Title,\n  Loading, \n//  Feature,\n//  Loading,\n  Preview,\n  Search,\n//  Title\n} from './components';\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\nconst [searchResults, setSearchResults] = useState({info: {}, records: []});\nconst [featuredResult, setFeaturedResult] = useState(null);\nconst [isLoading, setIsLoading ] = useState(false);\n\n// const loadComponent = () => {setIsLoading(!isLoading) } // THIS IS SAMPLE CODE\nreturn <div className=\"app\">\n    {/* <Title /> is static, doesn't need any props */}\n     <Title /> \n\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n\n    <Search setIsLoading ={setIsLoading} setSearchResults={setSearchResults} />\n\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n\n    <Preview searchResults={searchResults} setIsLoading={setIsLoading} setSearchResults={setSearchResults} setFeaturedResults={setFeaturedResult}/>\n\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    \n    {/* <Feature /> */}\n\n    <Loading isLoading ={isLoading} />\n        \n    {/* use a ternary and render null if isLoading is false */}\n    \n    {/* <button onClick={()=>setIsLoading(!isLoading)}>Click Me</button> THIS IS SAMPLE CODE*/ }\n    {/* <button onClick={loadComponent}>Click Me</button> THIS IS SAMPLE CODE*/}\n    <Loading isLoading={isLoading} />{/* isloading?<Loading />: null */}\n  </div>\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app'),\n);\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */"],"mappings":"oKAAA,MAAOA,MAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAOC,SAAQ,KAAM,WAAW,CAEhC;AACA,OACEC,KAAK,CACLC,OAAO,CACT;AACA;AACEC,OAAO,CACPC,MACF;AAAA,KACO,cAAc,CAErB,GAAMC,IAAG,CAAG,QAANA,IAAG,EAAS,CAChB;AACF;AACA;AACA;AACA;AACA;AACA;AACA,KACA,cAA0CN,QAAQ,CAAC,CAACO,IAAI,CAAE,CAAC,CAAC,CAAEC,OAAO,CAAE,EAAE,CAAC,CAAC,wCAApEC,aAAa,eAAEC,gBAAgB,eACtC,eAA4CV,QAAQ,CAAC,IAAI,CAAC,yCAAnDW,cAAc,eAAEC,iBAAiB,eACxC,eAAmCZ,QAAQ,CAAC,KAAK,CAAC,yCAA3Ca,SAAS,eAAEC,YAAY,eAE9B;AACA,mBAAO,2BAAK,SAAS,CAAC,KAAK,eAEtB,oBAAC,KAAK,MAAG,cAIV,oBAAC,MAAM,EAAC,YAAY,CAAGA,YAAa,CAAC,gBAAgB,CAAEJ,gBAAiB,EAAG,cAI3E,oBAAC,OAAO,EAAC,aAAa,CAAED,aAAc,CAAC,YAAY,CAAEK,YAAa,CAAC,gBAAgB,CAAEJ,gBAAiB,CAAC,kBAAkB,CAAEE,iBAAkB,EAAE,cAM/I,oBAAC,OAAO,EAAC,SAAS,CAAGC,SAAU,EAAG,cAMlC,oBAAC,OAAO,EAAC,SAAS,CAAEA,SAAU,EAAG,CAC7B,CACR,CAAC,CAEDZ,QAAQ,CAACc,MAAM,cACb,oBAAC,GAAG,MAAG,CACPC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC,CAC/B,CACD;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}