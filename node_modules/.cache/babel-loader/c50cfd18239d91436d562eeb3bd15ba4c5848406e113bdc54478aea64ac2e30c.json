{"ast":null,"code":"var _jsxFileName = \"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/components/Search.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { fetchAllCenturies, fetchAllClassifications, fetchQueryResults } from '../api';\nimport { Options } from './Options.js';\nconst Search = props => {\n  _s();\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n  const {\n    setIsLoading,\n    setSearchResults\n  } = props;\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState\n   * for our controlled inputs:\n   */\n  /* centuryList, setCenturyList (default should be an empty array, [])*/\n  const [centuryList, setCenturyList] = useState([]);\n  /* classificationList, setClassificationList (default should be an empty array, [])*/\n\n  const [classificationList, setClassificationList] = useState([]);\n  /* queryString, setQueryString (default should be an empty string, '')*/\n  const [queryString, setQueryString] = useState('');\n  /* century, setCentury (default should be the string 'any')*/\n  const [century, setCentury] = useState('any');\n  /* classification, setClassification (default should be the string 'any')*/\n\n  const [classification, setClassification] = useState('any');\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    async function fetchCenturyAndClass() {\n      const centuries = await fetchAllCenturies();\n      const classifications = await fetchAllClassifications();\n      return Promise.all([centuries, classifications]);\n    }\n    fetchCenturyAndClass().then(data => {\n      const [centuriesArray, classificationsArray] = data;\n      setCenturyList(centuriesArray);\n      console.log(centuryList);\n      setClassificationList(classificationsArray);\n    });\n  }, []);\n  const handleQueryChange = event => {\n    setQueryString(event.target.value);\n  };\n  const handleClassificationChange = event => {\n    setClassification(event.target.value);\n  };\n  const handleCenturyChange = event => {\n    setCentury(event.target.value);\n  };\n  function convertObject(object) {\n    for (let i = 0; i < object.length; i++) {}\n  }\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   **/\n  return;\n  /*#__PURE__*/React.createElement(\"form\", {\n    id: \"search\",\n    onSubmit: async event => {\n      // write code here\n      event.preventDefault();\n      setIsLoading = true;\n      try {\n        /*try to:\n        * - get the results from fetchQueryResults({ century, classification, queryString })\n        * - pass them to setSearchResults*/\n        //console.log(\"Hi I'm here!\");\n        const queryResults = await fetchQueryResults({\n          century,\n          classification,\n          queryString\n        }).then(data => {\n          setSearchResults(data);\n        });\n      } catch (errorObject) {\n        console.error(`Search Error:${errorObject}`); //catch: error to console.error\n      } finally {\n        setIsLoading(false); // finally: call setIsLoading, set it to false\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"keywords\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, \"Query\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"keywords\",\n    type: \"text\",\n    placeholder: \"enter keywords...\",\n    value: queryString,\n    onChange: handleQueryChange /* this should update the value of the query string */,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"select-classification\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, \"Classification \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"classification-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 63\n    }\n  }, \"(\", classificationList === null || classificationList === void 0 ? void 0 : classificationList.length, \")\")), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"classification\",\n    id: \"select-classification\",\n    value: classification /* this should be the classification */,\n    onChange: handleClassificationChange /* this should update the value of the classification */,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"any\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, \"Any\"))), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"select-century\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, \"Century \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"century-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 49\n    }\n  }, \"(\", centuryList === null || centuryList === void 0 ? void 0 : centuryList.length, \")\")), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"century\",\n    id: \"select-century\",\n    value: century /* this should be the century */,\n    onChange: handleCenturyChange /* this should update the value of the century */,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"any\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, \"Any\"))), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, \"SEARCH\"));\n};\n_s(Search, \"/3LTcD+DR1MIBxmqxAKgP5zWaaE=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useEffect","useState","fetchAllCenturies","fetchAllClassifications","fetchQueryResults","Options","Search","props","setIsLoading","setSearchResults","centuryList","setCenturyList","classificationList","setClassificationList","queryString","setQueryString","century","setCentury","classification","setClassification","fetchCenturyAndClass","centuries","classifications","Promise","all","then","data","centuriesArray","classificationsArray","console","log","handleQueryChange","event","target","value","handleClassificationChange","handleCenturyChange","convertObject","object","i","length","preventDefault","queryResults","errorObject","error"],"sources":["/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/components/Search.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nimport {\n  Options \n} from './Options.js'\n\nconst Search = (props) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n  const { setIsLoading, setSearchResults } = props;\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState\n   * for our controlled inputs:\n   */ \n   /* centuryList, setCenturyList (default should be an empty array, [])*/\n  const [ centuryList, setCenturyList ] = useState([]);\n   /* classificationList, setClassificationList (default should be an empty array, [])*/\n  \n  \n  const [ classificationList, setClassificationList ] = useState([]);\n   /* queryString, setQueryString (default should be an empty string, '')*/\n   const [ queryString, setQueryString ] = useState('');\n   /* century, setCentury (default should be the string 'any')*/\n   const [ century, setCentury ] = useState('any');\n   /* classification, setClassification (default should be the string 'any')*/\n\n   const [ classification, setClassification ] = useState('any');\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => \n  {\n    async function fetchCenturyAndClass () {\n    \n      const centuries = await fetchAllCenturies();\n      const classifications = await fetchAllClassifications();\n\n      return Promise.all([centuries, classifications])\n      }\n\n  fetchCenturyAndClass()\n      .then((data)=>\n        {\n        const [centuriesArray, classificationsArray] = data\n        setCenturyList(centuriesArray);\n        console.log(centuryList);\n        setClassificationList(classificationsArray);\n        })\n      \n  }, []);\n\n  const handleQueryChange = (event) => {\n    setQueryString(event.target.value)\n  }\n\n  const handleClassificationChange = (event) => {\n      setClassification(event.target.value)\n  }\n\n  const handleCenturyChange = (event) => {\n      setCentury(event.target.value)\n  }\n \n  function convertObject(object) {\n    for (let i=0; i<object.length; i++)\n    {\n\n    }\n  }\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   **/\n  return \n    <form id=\"search\" onSubmit={async (event) => {\n      // write code here\n      event.preventDefault();\n      setIsLoading = true;\n      try \n      {\n        /*try to:\n        * - get the results from fetchQueryResults({ century, classification, queryString })\n        * - pass them to setSearchResults*/\n        //console.log(\"Hi I'm here!\");\n        const queryResults = await fetchQueryResults({century, classification, queryString})\n        .then((data) => { \n        setSearchResults(data) })\n      }\n      catch (errorObject){\n        console.error(`Search Error:${errorObject}`); //catch: error to console.error\n      }\n      finally {\n        setIsLoading(false); // finally: call setIsLoading, set it to false\n      }\n    }}>\n      <fieldset>\n        <label htmlFor=\"keywords\">Query</label>\n        <input \n          id=\"keywords\" \n          type=\"text\" \n          placeholder=\"enter keywords...\" \n          value={queryString} \n          onChange={handleQueryChange/* this should update the value of the query string */}/>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList?.length })</span></label>\n        <select \n          name=\"classification\"\n          id=\"select-classification\"\n          value={classification/* this should be the classification */} \n          onChange={handleClassificationChange/* this should update the value of the classification */}>\n          <option value=\"any\">Any</option>\n          {/* map over the classificationList, return an <option /> */}\n        </select>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList?.length })</span></label>\n        <select \n          name=\"century\" \n          id=\"select-century\"\n          value={century/* this should be the century */} \n          onChange={handleCenturyChange/* this should update the value of the century */}>\n          <option value=\"any\">Any</option>\n          \n          {/* <Option list={centuryList}/> */}\n          {/* {centuryList.map(`<option value=${}`)) */}\n          {/* {centuryList.map((item, index) => (\n            <option key = {index} value = {item.id}>\n                {item.name}\n          </option>))} */}\n          {/*map over the centuryList, return an <option /> */}\n        </select>\n      </fieldset>\n      <button>SEARCH</button>\n    </form>\n}\n\nexport default Search;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}