{"ast":null,"code":"import _regeneratorRuntime from\"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _readOnlyError from\"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/node_modules/@babel/runtime/helpers/esm/readOnlyError.js\";import React,{useEffect,useState}from'react';/**\n * Don't touch these imports!\n */import{fetchAllCenturies,fetchAllClassifications,fetchQueryResults}from'../api';var Search=function Search(props){// Make sure to destructure setIsLoading and setSearchResults from the props\nvar setIsLoading=props.setIsLoading,setSearchResults=props.setSearchResults;/**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState\n   * for our controlled inputs:\n   */ /* centuryList, setCenturyList (default should be an empty array, [])*/var _useState=useState([]),_useState2=_slicedToArray(_useState,2),centuryList=_useState2[0],setCenturyList=_useState2[1];/* classificationList, setClassificationList (default should be an empty array, [])*/var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),classificationList=_useState4[0],setClassificationList=_useState4[1];/* queryString, setQueryString (default should be an empty string, '')*/var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),queryString=_useState6[0],setQueryString=_useState6[1];/* century, setCentury (default should be the string 'any')*/var _useState7=useState('any'),_useState8=_slicedToArray(_useState7,2),century=_useState8[0],setCentury=_useState8[1];/* classification, setClassification (default should be the string 'any')*/var _useState9=useState('any'),_useState10=_slicedToArray(_useState9,2),classification=_useState10[0],setClassification=_useState10[1];/**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */useEffect(function(){function fetchCenturyAndClass(){return _fetchCenturyAndClass.apply(this,arguments);}function _fetchCenturyAndClass(){_fetchCenturyAndClass=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var centuries,classifications;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchAllCenturies();case 2:centuries=_context.sent;_context.next=5;return fetchAllClassifications();case 5:classifications=_context.sent;return _context.abrupt(\"return\",Promise.all([centuries,classifications]));case 7:case\"end\":return _context.stop();}}},_callee);}));return _fetchCenturyAndClass.apply(this,arguments);}fetchCenturyAndClass().then(function(data){var _data=_slicedToArray(data,2),centuriesArray=_data[0],classificationsArray=_data[1];setCenturyList(centuriesArray);//console.log(centuryList);\nsetClassificationList(classificationsArray);});},[]);var handleQueryChange=function handleQueryChange(event){setQueryString(event.target.value);};var handleClassificationChange=function handleClassificationChange(event){setClassification(event.target.value);};var handleCenturyChange=function handleCenturyChange(event){setCentury(event.target.value);};//Map through centuryList AND create an option tag select list\nvar CenturyOptions=function CenturyOptions(){var listItem=centuryList.map(function(data){return/*#__PURE__*/React.createElement(\"option\",{value:data.name},data.name);});return listItem;};//Map through classificationList AND create an option tag select list\nvar ClassificationOptions=function ClassificationOptions(){var listItem=classificationList.map(function(data){return/*#__PURE__*/React.createElement(\"option\",{value:data.name},data.name);});return listItem;};/**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   **/return/*#__PURE__*/React.createElement(\"form\",{id:\"search\",onSubmit:/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(event){var queryResults;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// write code here\nevent.preventDefault();true,_readOnlyError(\"setIsLoading\");_context2.prev=2;_context2.next=5;return fetchQueryResults({century:century,classification:classification,queryString:queryString}).then(function(data){setSearchResults(data);});case 5:queryResults=_context2.sent;_context2.next=11;break;case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](2);console.error(\"Search Error:\".concat(_context2.t0));//catch: error to console.error\ncase 11:_context2.prev=11;setIsLoading(false);// finally: call setIsLoading, set it to false\nreturn _context2.finish(11);case 14:case\"end\":return _context2.stop();}}},_callee2,null,[[2,8,11,14]]);}));return function(_x){return _ref.apply(this,arguments);};}()},/*#__PURE__*/React.createElement(\"fieldset\",null,/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"keywords\"},\"Query\"),/*#__PURE__*/React.createElement(\"input\",{id:\"keywords\",type:\"text\",placeholder:\"enter keywords...\",value:queryString,onChange:handleQueryChange/* this should update the value of the query string */})),/*#__PURE__*/React.createElement(\"fieldset\",null,/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"select-classification\"},\"Classification\",/*#__PURE__*/React.createElement(\"span\",{className:\"classification-count\"},\"(\",classificationList===null||classificationList===void 0?void 0:classificationList.length,\")\")),/*#__PURE__*/React.createElement(\"select\",{name:\"classification\",id:\"select-classification\",value:classification/* this should be the classification */,onChange:handleClassificationChange/* this should update the value of the classification */},/*#__PURE__*/React.createElement(\"option\",{value:\"any\"},\"Any\"),/*#__PURE__*/React.createElement(ClassificationOptions,null),\" \")),/*#__PURE__*/React.createElement(\"fieldset\",null,/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"select-century\"},\"Century\",/*#__PURE__*/React.createElement(\"span\",{className:\"century-count\"},\"(\",centuryList===null||centuryList===void 0?void 0:centuryList.length,\")\")),/*#__PURE__*/React.createElement(\"select\",{name:\"century\",id:\"select-century\",value:century/* this should be the century */,onChange:handleCenturyChange/* this should update the value of the century */},/*#__PURE__*/React.createElement(\"option\",{value:\"any\"},\"Any\"),/*#__PURE__*/React.createElement(CenturyOptions,null),\" \")),/*#__PURE__*/React.createElement(\"button\",null,\"SEARCH\"));};export default Search;","map":{"version":3,"names":["React","useEffect","useState","fetchAllCenturies","fetchAllClassifications","fetchQueryResults","Search","props","setIsLoading","setSearchResults","centuryList","setCenturyList","classificationList","setClassificationList","queryString","setQueryString","century","setCentury","classification","setClassification","fetchCenturyAndClass","centuries","classifications","Promise","all","then","data","centuriesArray","classificationsArray","handleQueryChange","event","target","value","handleClassificationChange","handleCenturyChange","CenturyOptions","listItem","map","name","ClassificationOptions","preventDefault","queryResults","console","error","length"],"sources":["/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/components/Search.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = (props) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n  const { setIsLoading, setSearchResults } = props;\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState\n   * for our controlled inputs:\n   */ \n   /* centuryList, setCenturyList (default should be an empty array, [])*/\n  const [ centuryList, setCenturyList ] = useState([]);\n   /* classificationList, setClassificationList (default should be an empty array, [])*/\n  \n  \n  const [ classificationList, setClassificationList ] = useState([]);\n   /* queryString, setQueryString (default should be an empty string, '')*/\n   const [ queryString, setQueryString ] = useState('');\n   /* century, setCentury (default should be the string 'any')*/\n   const [ century, setCentury ] = useState('any');\n   /* classification, setClassification (default should be the string 'any')*/\n\n   const [ classification, setClassification ] = useState('any');\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => \n  {\n    async function fetchCenturyAndClass () {\n    \n      const centuries = await fetchAllCenturies();\n      const classifications = await fetchAllClassifications();\n\n      return Promise.all([centuries, classifications])\n      }\n\n  fetchCenturyAndClass()\n      .then((data)=>\n        {\n        const [centuriesArray, classificationsArray] = data\n        setCenturyList(centuriesArray);\n        //console.log(centuryList);\n        setClassificationList(classificationsArray);\n        })\n      \n  }, []);\n\n  const handleQueryChange = (event) => {\n    setQueryString(event.target.value)\n  }\n\n  const handleClassificationChange = (event) => {\n      setClassification(event.target.value)\n  }\n\n  const handleCenturyChange = (event) => {\n      setCentury(event.target.value)\n  }\n  //Map through centuryList AND create an option tag select list\n  const CenturyOptions = () => \n  {\n    const listItem = centuryList.map((data) => \n    {\n      return <option value={data.name}>{data.name}</option>\n    })\n   return listItem;\n  }\n  //Map through classificationList AND create an option tag select list\n  const ClassificationOptions = () => \n  {\n    const listItem = classificationList.map((data) => {\n       return(\n      <option value={data.name}>{data.name}</option>\n    )\n    })\n    return listItem;\n  }\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   **/\n  return <form id=\"search\" onSubmit={async (event) => {\n      // write code here\n      event.preventDefault();\n      setIsLoading = true;\n      try \n      {\n        /*try to:\n        * - get the results from fetchQueryResults({ century, classification, queryString })\n        * - pass them to setSearchResults*/\n        //console.log(\"Hi I'm here!\");\n        const queryResults = await fetchQueryResults({century, classification, queryString})\n        .then((data) => { \n        setSearchResults(data) })\n      }\n      catch (errorObject){\n        console.error(`Search Error:${errorObject}`); //catch: error to console.error\n      }\n      finally {\n        setIsLoading(false); // finally: call setIsLoading, set it to false\n      }\n      }}>\n      <fieldset>\n        <label htmlFor=\"keywords\">Query</label>\n        <input \n          id=\"keywords\" \n          type=\"text\" \n          placeholder=\"enter keywords...\" \n          value={queryString} \n          onChange={handleQueryChange/* this should update the value of the query string */}/>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-classification\">Classification \n          <span className=\"classification-count\">({ classificationList?.length })</span>\n        </label>\n        <select \n          name=\"classification\"\n          id=\"select-classification\"\n          value={classification/* this should be the classification */} \n          onChange={handleClassificationChange/* this should update the value of the classification */}>\n          <option value=\"any\">Any</option>\n          <ClassificationOptions /> {/* map over the classificationList, return an <option /> */}\n        </select>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-century\">Century \n          <span className=\"century-count\">({ centuryList?.length })</span>\n        </label>\n        <select \n          name=\"century\" \n          id=\"select-century\"\n          value={century/* this should be the century */} \n          onChange={handleCenturyChange/* this should update the value of the century */}>\n          <option value=\"any\">Any</option>\n          <CenturyOptions /> {/*map over the centuryList, return an <option /> */}\n        </select>\n      </fieldset>\n      <button>SEARCH</button>\n    </form>\n}\n\nexport default Search;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}