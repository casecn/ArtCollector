{"ast":null,"code":"import _regeneratorRuntime from\"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */export var BASE_URL='https://api.harvardartmuseums.org';export var KEY='apikey=7b7ba71e-4682-484c-b276-af4ca1611ebe';/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */export function fetchQueryResultsFromTermAndValue(_x,_x2){return _fetchQueryResultsFromTermAndValue.apply(this,arguments);}/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */function _fetchQueryResultsFromTermAndValue(){_fetchQueryResultsFromTermAndValue=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(term,value){var response,data;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(\"\".concat(BASE_URL,\"/object?\").concat(KEY,\"&\").concat(term,\"=\").concat(encodeURI(value.split('-').join('|'))));case 3:response=_context.sent;_context.next=6;return response.json();case 6:data=_context.sent;return _context.abrupt(\"return\",data);case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);throw _context.t0;case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,10]]);}));return _fetchQueryResultsFromTermAndValue.apply(this,arguments);}export function fetchQueryResultsFromURL(_x3){return _fetchQueryResultsFromURL.apply(this,arguments);}/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */function _fetchQueryResultsFromURL(){_fetchQueryResultsFromURL=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url){var response,data;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return fetch(url);case 3:response=_context2.sent;_context2.next=6;return response.json();case 6:data=_context2.sent;return _context2.abrupt(\"return\",data);case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](0);throw _context2.t0;case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[0,10]]);}));return _fetchQueryResultsFromURL.apply(this,arguments);}export function fetchQueryResults(_x4){return _fetchQueryResults.apply(this,arguments);}/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */function _fetchQueryResults(){_fetchQueryResults=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref){var century,classification,queryString,url,response,data;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:century=_ref.century,classification=_ref.classification,queryString=_ref.queryString;url=\"\".concat(BASE_URL,\"/object?\").concat(KEY,\"&classification=\").concat(classification,\"&century=\").concat(century,\"&keyword=\").concat(queryString);_context3.prev=2;_context3.next=5;return fetch(url);case 5:response=_context3.sent;_context3.next=8;return response.json();case 8:data=_context3.sent;return _context3.abrupt(\"return\",data);case 12:_context3.prev=12;_context3.t0=_context3[\"catch\"](2);throw _context3.t0;case 15:case\"end\":return _context3.stop();}}},_callee3,null,[[2,12]]);}));return _fetchQueryResults.apply(this,arguments);}export function fetchAllCenturies(){return _fetchAllCenturies.apply(this,arguments);}/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */function _fetchAllCenturies(){_fetchAllCenturies=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(){var url,response,data,records;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!localStorage.getItem('centuries')){_context4.next=2;break;}return _context4.abrupt(\"return\",JSON.parse(localStorage.getItem('centuries')));case 2:url=\"\".concat(BASE_URL,\"/century?\").concat(KEY,\"&size=100&sort=temporalorder\");_context4.prev=3;_context4.next=6;return fetch(url);case 6:response=_context4.sent;_context4.next=9;return response.json();case 9:data=_context4.sent;records=data.records;localStorage.setItem('centuries',JSON.stringify(records));return _context4.abrupt(\"return\",records);case 15:_context4.prev=15;_context4.t0=_context4[\"catch\"](3);throw _context4.t0;case 18:case\"end\":return _context4.stop();}}},_callee4,null,[[3,15]]);}));return _fetchAllCenturies.apply(this,arguments);}export function fetchAllClassifications(){return _fetchAllClassifications.apply(this,arguments);}function _fetchAllClassifications(){_fetchAllClassifications=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(){var url,response,data,records;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(!localStorage.getItem('classifications')){_context5.next=2;break;}return _context5.abrupt(\"return\",JSON.parse(localStorage.getItem('classifications')));case 2:url=\"\".concat(BASE_URL,\"/classification?\").concat(KEY,\"&size=100&sort=name\");_context5.prev=3;_context5.next=6;return fetch(url);case 6:response=_context5.sent;_context5.next=9;return response.json();case 9:data=_context5.sent;records=data.records;localStorage.setItem('classifications',JSON.stringify(records));return _context5.abrupt(\"return\",records);case 15:_context5.prev=15;_context5.t0=_context5[\"catch\"](3);throw _context5.t0;case 18:case\"end\":return _context5.stop();}}},_callee5,null,[[3,15]]);}));return _fetchAllClassifications.apply(this,arguments);}","map":{"version":3,"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications"],"sources":["/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/api/index.js"],"sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=7b7ba71e-4682-484c-b276-af4ca1611ebe';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}"],"mappings":"wVAAA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMA,SAAQ,CAAG,mCAAmC,CAC3D,MAAO,IAAMC,IAAG,CAAG,6CAA6C,CAEhE;AACA;AACA,GACA,eAAsBC,kCAAiC,0EAWvD;AACA;AACA,GAFA,2IAXO,iBAAiDC,IAAI,CAAEC,KAAK,4KAExCC,MAAK,WAAKL,QAAQ,oBAAaC,GAAG,aAAME,IAAI,aAAMG,SAAS,CAACF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAI,QAA5GC,QAAQ,qCACKA,SAAQ,CAACC,IAAI,EAAE,QAA5BC,IAAI,+CAEHA,IAAI,mJAId,oEAKD,eAAsBC,yBAAwB,8DAW9C;AACA;AACA;AACA;AACA,GAJA,yHAXO,kBAAwCC,GAAG,kLAEvBR,MAAK,CAACQ,GAAG,CAAC,QAA3BJ,QAAQ,uCACKA,SAAQ,CAACC,IAAI,EAAE,QAA5BC,IAAI,iDAEHA,IAAI,yJAId,2DAOD,eAAsBG,kBAAiB,uDAkBvC;AACA;AACA,GAFA,2GAlBO,uMACLC,OAAO,MAAPA,OAAO,CACPC,cAAc,MAAdA,cAAc,CACdC,WAAW,MAAXA,WAAW,CAELJ,GAAG,WAAOb,QAAQ,oBAAaC,GAAG,4BAAqBe,cAAc,qBACzED,OAAO,qBAAcE,WAAW,0CAGTZ,MAAK,CAACQ,GAAG,CAAC,QAA3BJ,QAAQ,uCACKA,SAAQ,CAACC,IAAI,EAAE,QAA5BC,IAAI,iDAEHA,IAAI,yJAId,oDAKD,eAAsBO,kBAAiB,oDAoBvC;AACA;AACA,GAFA,2GApBO,4KACDC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,2DAC5BC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,SAGhDP,GAAG,WAAOb,QAAQ,qBAAcC,GAAG,yEAGhBI,MAAK,CAACQ,GAAG,CAAC,QAA3BJ,QAAQ,uCACKA,SAAQ,CAACC,IAAI,EAAE,QAA5BC,IAAI,gBACJY,OAAO,CAAGZ,IAAI,CAACY,OAAO,CAE5BJ,YAAY,CAACK,OAAO,CAAC,WAAW,CAAEH,IAAI,CAACI,SAAS,CAACF,OAAO,CAAC,CAAC,CAAC,iCAEpDA,OAAO,yJAIjB,oDAKD,eAAsBG,wBAAuB,0DAkB5C,uHAlBM,4KACDP,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,2DAClCC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC,SAGtDP,GAAG,WAAOb,QAAQ,4BAAqBC,GAAG,gEAGvBI,MAAK,CAACQ,GAAG,CAAC,QAA3BJ,QAAQ,uCACKA,SAAQ,CAACC,IAAI,EAAE,QAA5BC,IAAI,gBACJY,OAAO,CAAGZ,IAAI,CAACY,OAAO,CAE5BJ,YAAY,CAACK,OAAO,CAAC,iBAAiB,CAAEH,IAAI,CAACI,SAAS,CAACF,OAAO,CAAC,CAAC,CAAC,iCAE1DA,OAAO,yJAIjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}