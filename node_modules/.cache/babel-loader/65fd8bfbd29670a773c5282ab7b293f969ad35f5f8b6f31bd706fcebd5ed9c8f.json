{"ast":null,"code":"var _jsxFileName = \"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/components/Search.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { fetchAllCenturies, fetchAllClassifications, fetchQueryResults } from '../api';\nconst Search = props => {\n  _s();\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n  const {\n    setIsLoading,\n    setSearchResults\n  } = props;\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState\n   * for our controlled inputs:\n   */\n  /* centuryList, setCenturyList (default should be an empty array, [])*/\n  const [centuryList, setCenturyList] = useState([]);\n  /* classificationList, setClassificationList (default should be an empty array, [])*/\n  const [classificationList, setClassificationList] = useState([]);\n  /* queryString, setQueryString (default should be an empty string, '')*/\n  const [queryString, setQueryString] = useState(\"\");\n  /* century, setCentury (default should be the string 'any')*/\n  const [century, setCentury] = useState(\"any\");\n  /* classification, setClassification (default should be the string 'any')*/\n  const [classification, setClassification] = useState(\"any\");\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   *\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   *\n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    try {\n      promise.all([fetchAllCenturies(), fetchAllClassifications()]).then(_ref => {\n        let [century, classification] = _ref;\n        setCenturyList(century);\n        setClassificationList(classification);\n      });\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }, []);\n\n  //Map through centuryList AND create an option tag select list\n  const CenturyOptions = () => {\n    const listItem = centuryList.map(data => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: data.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 14\n        }\n      }, data.name);\n    });\n    return listItem;\n  };\n  //Map through classificationList AND create an option tag select list\n  const ClassificationOptions = () => {\n    const listItem = classificationList.map(data => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: data.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 14\n        }\n      }, data.name);\n    });\n    return listItem;\n  };\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   *\n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   *\n   * then, in a try/catch/finally block:\n   **/\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"search\",\n    onSubmit: async event => {\n      // write code here\n      event.preventDefault();\n      setIsLoading = true;\n      try {\n        /*try to:\n         * - get the results from fetchQueryResults({ century, classification, queryString })\n         * - pass them to setSearchResults*/\n        //console.log(\"Hi I'm here!\");\n        const queryResults = await fetchQueryResults({\n          century,\n          classification,\n          queryString\n        });\n        setSearchResults(queryResults);\n      } catch (errorObject) {\n        console.error(`Search Error:${errorObject}`); //catch: error to console.error\n      } finally {\n        setIsLoading(false); // finally: call setIsLoading, set it to false\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"keywords\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Query\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"keywords\",\n    type: \"text\",\n    placeholder: \"enter keywords...\",\n    value: queryString,\n    onChange: /* this should update the value of the query string */\n    setQueryString(target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"select-classification\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"Classification\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"classification-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, \"(\", classificationList === null || classificationList === void 0 ? void 0 : classificationList.length, \")\")), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"classification\",\n    id: \"select-classification\",\n    value: classification /* this should be the classification */,\n    onChange: setClassification(target.value) /* this should update the value of the classification */,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"any\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, \"Any\"), /* map over the classificationList, return an <option /> */\n  classificationList.map((classification, index) => {\n    /*#__PURE__*/React.createElement(\"option\", {\n      key: `${index}: ${classification.name}`,\n      value: classification.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }\n    }, classification.name);\n  }))), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"select-century\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, \"Century\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"century-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, \"(\", centuryList === null || centuryList === void 0 ? void 0 : centuryList.length, \")\")), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"century\",\n    id: \"select-century\",\n    value: century /* this should be the century */,\n    onChange: setCentury(target.value) /* this should update the value of the century */,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"any\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, \"Any\"), /*map over the centuryList, return an <option /> */\n  centuryList.map((century, index) => {\n    /*#__PURE__*/React.createElement(\"option\", {\n      key: `${index}: ${century.name}`,\n      value: century.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 51\n      }\n    }, century.name);\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, \"SEARCH\"));\n};\n_s(Search, \"q9Sa7SH5JDVcA0KiUTud6i4aT0A=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useEffect","useState","fetchAllCenturies","fetchAllClassifications","fetchQueryResults","Search","props","setIsLoading","setSearchResults","centuryList","setCenturyList","classificationList","setClassificationList","queryString","setQueryString","century","setCentury","classification","setClassification","promise","all","then","error","console","CenturyOptions","listItem","map","data","name","ClassificationOptions","event","preventDefault","queryResults","errorObject","target","value","length","index"],"sources":["/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/components/Search.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = (props) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n  const { setIsLoading, setSearchResults } = props;\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState\n   * for our controlled inputs:\n   */\n  /* centuryList, setCenturyList (default should be an empty array, [])*/\n  const [centuryList, setCenturyList] = useState([]);\n  /* classificationList, setClassificationList (default should be an empty array, [])*/\n  const [classificationList, setClassificationList] = useState([]);\n  /* queryString, setQueryString (default should be an empty string, '')*/\n  const [queryString, setQueryString] = useState(\"\");\n  /* century, setCentury (default should be the string 'any')*/\n  const [century, setCentury] = useState(\"any\");\n  /* classification, setClassification (default should be the string 'any')*/\n  const [classification, setClassification] = useState(\"any\");\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   *\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   *\n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    try {\n      promise\n        .all([fetchAllCenturies(), fetchAllClassifications()])\n        .then(([century, classification]) => {\n          setCenturyList(century);\n          setClassificationList(classification);\n        });\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }, []);\n\n \n   //Map through centuryList AND create an option tag select list\n  const CenturyOptions = () => {\n    const listItem = centuryList.map((data) => {\n      return <option value={data.name}>{data.name}</option>;\n    });\n    return listItem;\n  };\n  //Map through classificationList AND create an option tag select list\n  const ClassificationOptions = () => {\n    const listItem = classificationList.map((data) => {\n      return <option value={data.name}>{data.name}</option>;\n    });\n    return listItem;\n  };\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   *\n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   *\n   * then, in a try/catch/finally block:\n   **/\n  return (\n    <form\n      id=\"search\"\n      onSubmit={async (event) => {\n        // write code here\n        event.preventDefault();\n        setIsLoading = true;\n        try {\n          /*try to:\n           * - get the results from fetchQueryResults({ century, classification, queryString })\n           * - pass them to setSearchResults*/\n          //console.log(\"Hi I'm here!\");\n          const queryResults = await fetchQueryResults({\n            century,\n            classification,\n            queryString,\n          });\n          setSearchResults(queryResults);\n        } catch (errorObject) {\n          console.error(`Search Error:${errorObject}`); //catch: error to console.error\n        } finally {\n          setIsLoading(false); // finally: call setIsLoading, set it to false\n        }\n      }}\n    >\n      <fieldset>\n        <label htmlFor=\"keywords\">Query</label>\n        <input\n          id=\"keywords\"\n          type=\"text\"\n          placeholder=\"enter keywords...\"\n          value={queryString}\n          onChange={\n            /* this should update the value of the query string */\n            setQueryString(target.value)\n          }\n        />\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-classification\">\n          Classification{\" \"}\n          <span className=\"classification-count\">\n            ({classificationList?.length})\n          </span>\n        </label>\n        <select\n          name=\"classification\"\n          id=\"select-classification\"\n          value={classification /* this should be the classification */}\n          onChange={setClassification(\n            target.value\n          ) } /* this should update the value of the classification */\n        >\n          <option value=\"any\">Any</option>\n          {\n            /* map over the classificationList, return an <option /> */\n            classificationList.map((classification, index) => {\n              <option\n                key={`${index}: ${classification.name}`}\n                value={classification.name}\n              >\n                {classification.name}\n              </option>;\n            })\n          }\n        </select>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-century\">\n          Century\n          <span className=\"century-count\">({centuryList?.length})</span>\n        </label>\n        <select\n          name=\"century\"\n          id=\"select-century\"\n          value={century /* this should be the century */}\n          onChange={ setCentury(target.value) /* this should update the value of the century */\n          }\n        >\n          <option value=\"any\">Any</option>\n          { /*map over the centuryList, return an <option /> */\n            centuryList.map((century ,index) => { <option key={`${ index }: ${century.name}`} value={century.name}>{century.name}</option>;\n            })\n          }\n        </select>\n      </fieldset>\n      <button>SEARCH</button>\n    </form>\n  );\n}\n\nexport default Search;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}