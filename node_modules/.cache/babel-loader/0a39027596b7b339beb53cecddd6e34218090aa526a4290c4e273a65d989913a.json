{"ast":null,"code":"import _regeneratorRuntime from\"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import React from'react';/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */import{fetchQueryResultsFromURL}from'../api';var Preview=function Preview(props){/**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   * \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */var searchResults=props.searchResults,setIsLoading=props.setIsLoading,setSearchResults=props.setSearchResults,setFeaturedResult=props.setFeaturedResult;/**\n   * Don't touch this function, it's good to go.\n   * \n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */function fetchPage(_x){return _fetchPage.apply(this,arguments);}//const disablePagination ()\nfunction _fetchPage(){_fetchPage=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(pageUrl){var results;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setIsLoading(true);_context.prev=1;_context.next=4;return fetchQueryResultsFromURL(pageUrl);case 4:results=_context.sent;setSearchResults(results);_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](1);console.error(_context.t0);case 11:_context.prev=11;setIsLoading(false);return _context.finish(11);case 14:case\"end\":return _context.stop();}}},_callee,null,[[1,8,11,14]]);}));return _fetchPage.apply(this,arguments);}return/*#__PURE__*/React.createElement(\"aside\",{id:\"preview\"},/*#__PURE__*/React.createElement(\"header\",{className:\"pagination\"},/*#__PURE__*/React.createElement(\"button\",{disabled:'',className:\"previous\",onClick:disabled},\"Previous\"),/*#__PURE__*/React.createElement(\"button\",{disabled:'',className:\"next\",onClick:''},\"Next\")),/*#__PURE__*/React.createElement(\"section\",{className:\"results\"}));};export default Preview;","map":{"version":3,"names":["React","fetchQueryResultsFromURL","Preview","props","searchResults","setIsLoading","setSearchResults","setFeaturedResult","fetchPage","pageUrl","results","console","error","disabled"],"sources":["/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/components/Preview.js"],"sourcesContent":["import React from 'react';\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = (props) => {\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   * \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n  \n  const { searchResults, setIsLoading, setSearchResults, setFeaturedResult} = props;\n\n  /**\n   * Don't touch this function, it's good to go.\n   * \n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  //const disablePagination ()\n\n  \n  return <aside id=\"preview\">\n    <header className=\"pagination\">\n      {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n      \n    <button \n        disabled={''} \n        className=\"previous\"\n        onClick={disabled}>Previous</button> \n      {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n      <button\n        disabled={''}\n        className=\"next\"\n        onClick={''}>Next</button>\n    </header>\n    <section className=\"results\">\n      {\n        /* Here we should map over the records, and render something like this for each one:\n          <div  \n            key={ index }\n            className=\"object-preview\"\n            onClick={(event) => {\n              // prevent the default\n              // set the featured result to be this record, using setFeaturedResult\n            }}>\n            { \n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n            }\n            {\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n            }\n          </div>\n        */\n      }\n    </section>\n  </aside>\n}\n\nexport default Preview;"],"mappings":"wVAAA,MAAOA,MAAK,KAAM,OAAO,CAEzB;AACA;AACA;AACA,GACA,OAASC,wBAAwB,KAAQ,QAAQ,CAEjD,GAAMC,QAAO,CAAG,QAAVA,QAAO,CAAIC,KAAK,CAAK,CACzB;AACF;AACA;AACA;AACA;AACA,KAEE,GAAQC,cAAa,CAAuDD,KAAK,CAAzEC,aAAa,CAAEC,YAAY,CAAyCF,KAAK,CAA1DE,YAAY,CAAEC,gBAAgB,CAAuBH,KAAK,CAA5CG,gBAAgB,CAAEC,iBAAiB,CAAIJ,KAAK,CAA1BI,iBAAiB,CAExE;AACF;AACA;AACA;AACA,KAJE,QAKeC,UAAS,8CAYxB;AAAA,2FAZA,iBAAyBC,OAAO,gIAC9BJ,YAAY,CAAC,IAAI,CAAC,CAAC,sCAEKJ,yBAAwB,CAACQ,OAAO,CAAC,QAAjDC,OAAO,eACbJ,gBAAgB,CAACI,OAAO,CAAC,CAAC,+EAE1BC,OAAO,CAACC,KAAK,aAAO,CAAC,yBAErBP,YAAY,CAAC,KAAK,CAAC,CAAC,qGAEvB,4CAKD,mBAAO,6BAAO,EAAE,CAAC,SAAS,eACxB,8BAAQ,SAAS,CAAC,YAAY,eAG9B,8BACI,QAAQ,CAAE,EAAG,CACb,SAAS,CAAC,UAAU,CACpB,OAAO,CAAEQ,QAAS,aAAkB,cAEtC,8BACE,QAAQ,CAAE,EAAG,CACb,SAAS,CAAC,MAAM,CAChB,OAAO,CAAE,EAAG,SAAc,CACrB,cACT,+BAAS,SAAS,CAAC,SAAS,EAmBlB,CACJ,CACV,CAAC,CAED,cAAeX,QAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}