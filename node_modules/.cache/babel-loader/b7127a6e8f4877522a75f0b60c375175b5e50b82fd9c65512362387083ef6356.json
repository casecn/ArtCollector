{"ast":null,"code":"var _jsxFileName = \"/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/components/Preview.js\";\nimport React from 'react';\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from '../api';\nconst Preview = props => {\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   * \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n\n  const {\n    searchResults,\n    setIsLoading,\n    setSearchResults,\n    setFeaturedResult\n  } = props;\n  const {\n    info,\n    records\n  } = props.searchResults;\n  /**\n   * Don't touch this function, it's good to go.\n   * \n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  //const disablePagination ()\n\n  return /*#__PURE__*/React.createElement(\"aside\", {\n    id: \"preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !info.prev,\n    className: \"previous\",\n    onClick: () => fetchPage(info.prev),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Previous\"), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !info.next,\n    className: \"next\",\n    onClick: () => fetchPage(info.next),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"Next\")), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"results\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  },\n  /* Here we should map over the records, and render \n  something like this for each one:*/\n  records.map((record, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"object-preview\",\n      onClick: event => {\n        // prevent the default\n        event.preventDefault();\n        // set the featured result to be this record, using setFeaturedResult\n        setFeaturedResult(record);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    },\n    // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n    record.primaryimageurl ? /*#__PURE__*/React.createElement(\"img\", {\n      src: record.primaryimageurl,\n      alt: record.description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 41\n      }\n    }) : null,\n    // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n    record.title ? /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 32\n      }\n    }, record.title) : /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 59\n      }\n    }, \"MISSING INFO\"));\n  })));\n};\n_c = Preview;\nexport default Preview;\nvar _c;\n$RefreshReg$(_c, \"Preview\");","map":{"version":3,"names":["React","fetchQueryResultsFromURL","Preview","props","searchResults","setIsLoading","setSearchResults","setFeaturedResult","info","records","fetchPage","pageUrl","results","error","console","prev","next","map","record","index","event","preventDefault","primaryimageurl","description","title"],"sources":["/Users/cncase/projects/course_work/project_05/UNIV_Art_Collector_React_Starter/src/components/Preview.js"],"sourcesContent":["import React from 'react';\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = (props) => {\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   * \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n  \n  const { searchResults, setIsLoading, setSearchResults, setFeaturedResult} = props;\n  const {info, records} = props.searchResults;\n  /**\n   * Don't touch this function, it's good to go.\n   * \n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  //const disablePagination ()\n\n  \n  return (\n    <aside id=\"preview\">\n      <header className=\"pagination\">\n        {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n      <button \n          disabled={!info.prev} \n          className=\"previous\"\n          onClick={() => fetchPage(info.prev)}>Previous</button> \n        {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n        <button\n          disabled={!info.next}\n          className=\"next\"\n          onClick={() => fetchPage(info.next)}>Next</button>\n      </header>\n      <section className=\"results\">\n        {\n          /* Here we should map over the records, and render \n          something like this for each one:*/\n        records.map((record, index) => {\n          return (\n              <div  \n                key={ index }\n                className=\"object-preview\"\n                onClick={(event) => {\n                  // prevent the default\n                  event.preventDefault();\n                  // set the featured result to be this record, using setFeaturedResult\n                  setFeaturedResult(record);\n                  }\n                }\n              >\n              { \n                // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n                record.primaryimageurl? <img src={ record.primaryimageurl } alt ={ record.description } /> : null \n              }\n              {\n                // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n                record.title ? <h3>{record.title }</h3> : <h3>MISSING INFO</h3>\n              }\n            </div>\n            )}\n            )}\n      </section>\n    </aside>\n)}\n  \n\nexport default Preview;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA,SAASC,wBAAwB,QAAQ,QAAQ;AAEjD,MAAMC,OAAO,GAAIC,KAAK,IAAK;EACzB;AACF;AACA;AACA;AACA;AACA;;EAEE,MAAM;IAAEC,aAAa;IAAEC,YAAY;IAAEC,gBAAgB;IAAEC;EAAiB,CAAC,GAAGJ,KAAK;EACjF,MAAM;IAACK,IAAI;IAAEC;EAAO,CAAC,GAAGN,KAAK,CAACC,aAAa;EAC3C;AACF;AACA;AACA;AACA;EACE,eAAeM,SAAS,CAACC,OAAO,EAAE;IAChCN,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF,MAAMO,OAAO,GAAG,MAAMX,wBAAwB,CAACU,OAAO,CAAC;MACvDL,gBAAgB,CAACM,OAAO,CAAC;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,SAAS;MACRR,YAAY,CAAC,KAAK,CAAC;IACrB;EACF;;EAEA;;EAGA,oBACE;IAAO,EAAE,EAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACjB;IAAQ,SAAS,EAAC,YAAY;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAE9B;IACI,QAAQ,EAAE,CAACG,IAAI,CAACO,IAAK;IACrB,SAAS,EAAC,UAAU;IACpB,OAAO,EAAE,MAAML,SAAS,CAACF,IAAI,CAACO,IAAI,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,cAAkB,eAExD;IACE,QAAQ,EAAE,CAACP,IAAI,CAACQ,IAAK;IACrB,SAAS,EAAC,MAAM;IAChB,OAAO,EAAE,MAAMN,SAAS,CAACF,IAAI,CAACQ,IAAI,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,UAAc,CAC7C,eACT;IAAS,SAAS,EAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA;EAExB;AACV;EACQP,OAAO,CAACQ,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;IAC7B,oBACI;MACE,GAAG,EAAGA,KAAO;MACb,SAAS,EAAC,gBAAgB;MAC1B,OAAO,EAAGC,KAAK,IAAK;QAClB;QACAA,KAAK,CAACC,cAAc,EAAE;QACtB;QACAd,iBAAiB,CAACW,MAAM,CAAC;MACzB,CACD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA;IAGD;IACAA,MAAM,CAACI,eAAe,gBAAE;MAAK,GAAG,EAAGJ,MAAM,CAACI,eAAiB;MAAC,GAAG,EAAIJ,MAAM,CAACK,WAAa;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,GAAG,IAAI;IAGjG;IACAL,MAAM,CAACM,KAAK,gBAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAKN,MAAM,CAACM,KAAK,CAAO,gBAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,kBAAqB,CAE7D;EACL,CAAC,CACD,CACG,CACJ;AACX,CAAC;AAAA,KA1EItB,OAAO;AA6Eb,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}